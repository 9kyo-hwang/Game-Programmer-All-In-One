// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum EObjectType : int {
  None = 0,
  Player = 1,
  Monster = 2,
  EObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EObjectType_IsValid(int value);
constexpr EObjectType EObjectType_MIN = None;
constexpr EObjectType EObjectType_MAX = Monster;
constexpr int EObjectType_ARRAYSIZE = EObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EObjectType_descriptor();
template<typename T>
inline const std::string& EObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EObjectType_descriptor(), enum_t_value);
}
inline bool EObjectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EObjectType>(
    EObjectType_descriptor(), name, value);
}
enum EObjectState : int {
  Idle = 0,
  Move = 1,
  Attack = 2,
  EObjectState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EObjectState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EObjectState_IsValid(int value);
constexpr EObjectState EObjectState_MIN = Idle;
constexpr EObjectState EObjectState_MAX = Attack;
constexpr int EObjectState_ARRAYSIZE = EObjectState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EObjectState_descriptor();
template<typename T>
inline const std::string& EObjectState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EObjectState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EObjectState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EObjectState_descriptor(), enum_t_value);
}
inline bool EObjectState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EObjectState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EObjectState>(
    EObjectState_descriptor(), name, value);
}
enum EDirection : int {
  Up = 0,
  Down = 1,
  Left = 2,
  Right = 3,
  EDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EDirection_IsValid(int value);
constexpr EDirection EDirection_MIN = Up;
constexpr EDirection EDirection_MAX = Right;
constexpr int EDirection_ARRAYSIZE = EDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDirection_descriptor();
template<typename T>
inline const std::string& EDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EDirection_descriptor(), enum_t_value);
}
inline bool EDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EDirection>(
    EDirection_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::EObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::EObjectType>() {
  return ::Protocol::EObjectType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::EObjectState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::EObjectState>() {
  return ::Protocol::EObjectState_descriptor();
}
template <> struct is_proto_enum< ::Protocol::EDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::EDirection>() {
  return ::Protocol::EDirection_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
